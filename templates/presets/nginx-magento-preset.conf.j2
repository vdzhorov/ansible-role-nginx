{% if item.ssl_enabled %}server {

  listen 80;
  server_name {{ item.domain }} www.{{ item.domain }};
  return 301 https://{{ item.domain }}$request_uri;
}
server {

  listen 443 ssl;
  server_name www.{{ item.domain }};
  return 301 https://{{ item.domain }}$request_uri;
  ssl_certificate {{ item.ssl_crt_path }};
  ssl_certificate_key {{ item.ssl_key_path }};
}
{% endif %}
server {

  {% if item.ssl_enabled %}listen 443;
  {% else %}listen 80;
  {% endif %}
  server_name {{ item.domain }};
  {% if item.ssl_enabled %}include includes/ssl.conf;
  {% endif %}
  {% if item.gzip_enabled %}include includes/gzip.conf;
  {% endif %}
  {% if item.expires_enabled %}include includes/expires.conf;
  {% endif %}
  {% if item.security_headers_enabled %}include includes/headers.conf;
  {% endif %}
  {% if item.ssl_enabled %}ssl_certificate {{ item.ssl_crt_path }};
  ssl_certificate_key {{ item.ssl_key_path }};{% endif %}
  root /home/{{ item.user }}/public_html;
  access_log {{ nginx_log_path }}/{{ item.domain }}_access.log;
  error_log {{ nginx_log_path }}/{{ item.domain }}_error.log;
  index index.php index.html;
  # Android dupe request bug, https://www.byte.nl/blog/android-bug-can-kill-site-duplicate-requests
  set $request_url "$scheme://$http_host$request_uri";
  if ($request_url = $http_referer) {
     set $request_is_referer 1;
  }
  if ($http_user_agent ~ 'Android ([23]|4\.[0123])') {
      set $android_buggy_ua 1;
  }
  set $android_dupe_bug "${request_method}${android_buggy_ua}${request_is_referer}";
  if ($android_dupe_bug = 'GET11') {
      # http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
      return 429;
  }
  
  # Denied locations require a "^~" to prevent regexes (such as the PHP handler below) from matching
  # http://nginx.org/en/docs/http/ngx_http_core_module.html#location
  location ^~ /app/                       { return 403; }
  location ^~ /includes/                  { return 403; }
  location ^~ /media/downloadable/        { return 403; }
  location ^~ /pkginfo/                   { return 403; }
  location ^~ /report/config.xml          { return 403; }
  location ^~ /var/                       { return 403; }
  location ^~ /lib/                       { return 403; }
  location ^~ /dev/                       { return 403; }
  location ^~ /RELEASE_NOTES.txt          { return 403; }
  location ^~ /downloader/pearlib         { return 403; }
  location ^~ /downloader/template        { return 403; }
  location ^~ /downloader/Maged           { return 403; }
  location ~* ^/errors/.+\.xml            { return 403; }
  location ~ rss/(order|catalog) { deny all; }
  location ~ ^/([^/])+\.(sh|pl|py|lua|inc|swp|phar|php_|log|ini|md|sql|conf|yml|zip|tar|.+gz)$ { deny all; }
  location ~ /\.(svn|git|hg|htpasswd|bash|ssh) { deny all; }
  location ~ /(dev/tests/|errors/local.xml|cron\.php) { deny all; }
  location ~* /(tmp|lib|media|shell|skin)/.*\.php$ { deny all; }
  # CVE-2015-3428 / AW_Blog vulnerability
  # Note the .+ at the start: We want to allow url's like
  # order=create_date, which would otherwise match.
  if ($arg_order ~* .+(select|create|insert|update|drop|delete|concat|alter|load)) {
     return 403;
  }
  location /api { 
    rewrite ^/api/rest /api.php?type=rest break; 
  }
  if ($request_method !~ ^(GET|HEAD|POST)$ ) {
    return 444;
  }
  # Don't skip .thumbs, this is a default directory where Magento places thumbnails
  # Nginx cannot "not" match something, instead the target is matched with an empty block
  # http://stackoverflow.com/a/16304073
  location ~ /\.thumbs {
  }
  
  location / {
  
  rewrite ^/(.*)\.html/$ /$1.html redirect; 
  
      try_files $uri $uri/ @handler;
      expires 30d;
  }


  ## Order IS important! this is required BEFORE the PHP regex
  ## Allow PHP scripts in skin and JS, but render static 404 pages when skin or js file is missing
  ## Magento has RewriteCond %{REQUEST_URI} !^/(media|skin|js)/ in default htaccess
  location ~ ^/(skin|js)/ {
  location ~ \.php$ {
  include {{ fastcgi_params_location }};
  try_files $uri =404;
  fastcgi_split_path_info ^(.+.php)(/.*)$;
  fastcgi_index index.php;
  fastcgi_param PATH_INFO       $fastcgi_path_info;
  fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
  fastcgi_pass unix:{{ php_fpm_socket_location }}/{{ item.domain }}.sock;
  }
      try_files $uri $uri/ =404;
      expires 30d;
  }
  # Disallow PHP scripts in /media/
  # Also render static 404 pages for missing media
  location ~ ^/media/ {
      location ~ \.php$ {
          return 403;
      }
      try_files $uri $uri/ =404;
      expires 30d;
  }

  location @handler {
      rewrite / /index.php;
  }
  
  location ~ \.php$ {
  include {{ fastcgi_params_location }};
  try_files $uri =404;
  fastcgi_split_path_info ^(.+.php)(/.*)$;
  fastcgi_index index.php;
  fastcgi_param PATH_INFO       $fastcgi_path_info;
  fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
  fastcgi_pass unix:{{ php_fpm_socket_location }}/{{ item.domain }}.sock;
  }
 

  # Protection against unsecured magmi installs. User-editable
  # so user may set it up as they want. Must be included here
  # to catch and redirect PHP files, if this was loaded in later
  # (after the default php-fpm handler for .php files) then we
  # would not be able to redirect the magmi .php files (which are
  # the ones we really MUST redirect).
  location ~* /magmi($|/) {
      return 403;
  }
  
  
  rewrite ^/minify/([0-9]+)(/.*.(js|css))$ /lib/minify/m.php?f=$2&d=$1 last;
  rewrite ^/skin/m/([0-9]+)(/.*.(js|css))$ /lib/minify/m.php?f=$2&d=$1 last;
  location /lib/minify/                   { allow all; }
  
}
